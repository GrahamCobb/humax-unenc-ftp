#!/usr/bin/perl
# Copyright (C) 2014, 2015 Graham R. Cobb
# Released under GPL V2 -- see LICENSE

use strict;
use warnings;

use Getopt::Long 2.33 qw(:config gnu_getopt auto_help auto_version);
use Pod::Usage;
use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);
use Net::FTP;
use File::Basename;

our $VERSION = 0.2;

#
# Configuration data
#
my $ftpUser = "humaxftp";
my $ftpPassword = "0000";
my $verbosity = 1;
my $man = 0;
my $rename = 0;
my $dryRun = 0;

my $ftp;

#
# Logging
#
sub msgError
{
    print @_,"\n";
}
sub msgInfo
{
    print @_,"\n" if $verbosity >= 1;
}
sub msgProgress
{
    print @_,"\n" if $verbosity >= 2;
}
sub msgDebug
{
    print @_,"\n" if $verbosity >= 3;
}

#
# Option processing
#
#Getopt::Long::Configure ("bundling");
GetOptions(
           "dry-run|n" => \$dryRun,
           "rename|r" => \$rename,
	   "password|p=s" => \$ftpPassword,
	   "user|u=s" => \$ftpUser,
	   "verbose|v:+" => \$verbosity,
	   "man" => \$man,
	   ) or pod2usage(2);
msgDebug "man = $man";
if ($man) {
    pod2usage(-verbose => 2);
    exit;
}

my ($host, @toplevel) = @ARGV;

if (! $host) {
    msgError "Humax server address must be specified";
    pod2usage(2);
};

$toplevel[0] = "My Video" unless @toplevel;

my $debugFTP = $verbosity > 3;

msgDebug "verbosity = $verbosity";
msgDebug "ftpUser = $ftpUser";
msgDebug "ftpPassword = $ftpPassword";
msgDebug "host = $host";
msgDebug "toplevel = " . join(",", @toplevel);
msgDebug "debugFTP = $debugFTP";
msgDebug "rename = $rename";
msgDebug "dryRun = $dryRun";

=head1 NAME

humax-unenc-ftp - Remove ENC flag from Humax recordings remotely

=head1 SYNOPSIS

humax-unenc-ftp [options] <address> [<directory> ...]

humax-unenc-ftp -?|--help|--man|--version

 Commands:

  -?, --help			brief help message
  --man 			full documentation
  --version			script version

 Options:

  -n, --dry-run		Dry run only: do not modify files
  -r, --rename          Rename files after removing flag
  -p, --password=<pass> Specify FTP password (default 0000)
  -u, --user=<user>     Specify FTP username (default humaxftp)
  -v, --verbose[=N]	Increment or set verbosity level (0 - quiet, 1 - info, 2 - progress, 3 - debug, 4 - debug FTP)

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<humax-unenc-ftp> uses FTP to look through all the Humax recordings and clear the
ENC flag.

B<address> specifies the hostname or IP address of the Humax.

B<directory> specifies the directories to search (note that sub-directories
are also searched).  If no directories are specified, the default is "My Video".

=cut

# Return list of files in FTP current working directory
# Does not include . or ..
#
# dirFtp [<type> [<regex>]]
#
# <type> is ls-style file type (normally "-" or "d")
# <regex> is a regex for the file name to match (e.g. qr/\.txt$/)
sub dirFtp {
    my ($type, $regex) = @_;
    my @result = ();

#
# Humax FTP does not support NLIST, so we can't use $ftp->ls()
# We have to use $ftp->dir and parse the output.
# In this case, it is a /bin/ls -l directory listing, with lines like...
#drwxr-xr-x   4 root root 4096 Nov 16 22:46 My Video
#
    foreach my $line ($ftp->dir) {
	# Parse the unix-style DIR output the humax returns...
	$line =~ /^(.)([^\s]+)\s*(\d*)\s*([^\s]*)\s*([^\s]*)\s*(\d*)\s*(\w*\s*\d*\s*[\d:.]*)\s*(.*)$/ 
	    or die "Cannot parse output from FTP DIR: ",$line;

	my $filetype = $1;
	my $file = $8;
	next if ($type && $filetype ne $type);
	next if ($file eq "." || $file eq "..");
	next if ($regex && $file !~ $regex); # Note side-effect: $1-$8 redefined due to regex match

	push (@result, $file);
    }

    return @result;
}

sub walkFtpTree {
    my ($dir) = @_;

    my $olddir = $ftp->pwd;

    $ftp->cwd("$dir")
	or die "Cannot change working directory to $dir: ", $ftp->message;
    my $newdir = $ftp->pwd;

    foreach (dirFtp("-", qr/\.hmt$/)) {
	msgDebug "File found: $newdir/$_";
	handleHmt($newdir, $_);
    }

    # Recurse directories
    foreach (dirFtp("d")) {walkFtpTree($_);}

    $ftp->cwd("$olddir")
	or die "Cannot change working directory to $olddir: ", $ftp->message;
}

sub handleHmt {
    my ($dir, $file) = @_;
    my $hmt;
    use constant MAGIC_OFFSET => 0;
    use constant MAGIC_VALUE => 0x0117;
    use constant REC_END_OFFSET => 0x284;
    use constant ENC_OFFSET => 0x3dc;
    use constant ENC_FLAG => 0x04;

    $ftp->cwd("$dir")
	or die "Cannot change working directory to $dir: ", $ftp->message;

    # Read file into a local variable to do byte manipulation
    open my $fh, '+>', \$hmt;
    $ftp->binary
	or die "Cannot select binary mode: ", $ftp->message;
    $ftp->get("$file", $fh)
	or die "Cannot fetch .hmt file: ", $ftp->message;

    # Check magic number is correct for valid HMT file
    my $magic = unpack("@".MAGIC_OFFSET."v", $hmt);
    if ($magic != MAGIC_VALUE) {
	close $fh;
	msgInfo sprintf "Skipping invalid HMT $dir/$file as magic number 0x%x (0x%x) not equal to 0x%x", $magic, MAGIC_OFFSET, MAGIC_VALUE;
	return;
    }

    # Do not manipulate while recording is in progress or finished less than 1 minute ago
    my $rec_end_time = unpack("@".REC_END_OFFSET."V", $hmt);
    msgDebug "rec_end_time = $rec_end_time, now = ".time();
    if (time() < $rec_end_time + 60) {
	close $fh;
	msgInfo "Skipping $dir/$file as recording in progress";
	return;
    }

    my $enc = vec($hmt, ENC_OFFSET, 8) != ENC_FLAG;
    msgDebug sprintf "File %s/%s: %d bytes read. Byte %x = %x (%s)", $dir, $file, length($hmt), ENC_OFFSET, vec($hmt, ENC_OFFSET, 8), ($enc ? "Enc" : "not Enc");

    if ($enc) {
	# Clear the Enc status
	vec($hmt, ENC_OFFSET, 8) = ENC_FLAG;

	seek($fh, 0, SEEK_SET);

	if ($dryRun) {
	    msgInfo "$dir/$file would be set to be not Enc if this was not a dry-run";
	} else {
	    # Backup .hmt file
	    $ftp->delete("$file.bck"); # Ignore error
	    $ftp->rename("$file", "$file.bck")
		or die "Cannot rename .hmt file: ", $ftp->message;
	    $ftp->binary
		or die "Cannot select binary mode: ", $ftp->message;
	    # Rewrite .hmt file
	    $ftp->put($fh, "$file")
		or die "Cannot rewrite .hmt file: ", $ftp->message;

	    msgInfo "$dir/$file set to be not Enc";
	}

	# Optionally rename, to trigger DLNA update
	renameMediaFiles($dir, $file) if $rename;
    }
    
    close $fh;
}

sub renameMediaFiles {
    my ($dir, $name) = @_;

    $ftp->cwd("$dir")
	or die "Cannot change working directory ", $ftp->message;

    # Get basename for existing files
    my ($basename, undef, undef) = fileparse($name, qr/\..*$/);
    msgDebug "name = $name; basename = $basename";

    foreach my $file (dirFtp("-", "^$basename\\.")) {
	my (undef, undef, $suffix) = fileparse($file, qr/\..*$/);

	if ($dryRun) {
	    msgInfo "If this was not a dry-run: Rename $basename$suffix to $basename-$suffix";
	} else {
	    msgInfo "Rename $basename$suffix to $basename-$suffix";
	    $ftp->rename("$basename$suffix", "$basename-$suffix")
		or die "Cannot rename $basename$suffix: ", $ftp->message;
	}
    }

}

# Humax FTP does not support passive mode
$ftp = Net::FTP->new($host,
			Debug => $debugFTP,
			Passive => 0)
      or die "Cannot connect to $host: $@";

$ftp->login($ftpUser,$ftpPassword)
      or die "Cannot login: ", $ftp->message;

foreach (@toplevel) {walkFtpTree($_);}
